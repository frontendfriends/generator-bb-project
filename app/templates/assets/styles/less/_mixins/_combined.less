// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
.background-clip(@clip) {
    -webkit-background-clip: @clip;
     -moz-background-clip: @clip;
            background-clip: @clip;
}

// Background sizing
.background-size(@size){
    -webkit-background-size: @size;
     -moz-background-size: @size;
         -o-background-size: @size;
            background-size: @size;
}

// Background sizing
.background-size(@size1, @size2){
    -webkit-background-size: @size1 @size2;
     -moz-background-size: @size1 @size2;
         -o-background-size: @size1 @size2;
            background-size: @size1 @size2;
}

// RGBA Backgrounds
.rgba-bg(@colour, @alpha){
    @alphaColour: hsla(hue(@colour), saturation(@colour), lightness(@colour), @alpha);
    @ieAlphaColour: argb(@alphaColour);
    background-color: @colour; // Fallback for older browsers
    background-color: @alphaColour;

    .lt-ie9 & {
        // IE hacks
        zoom: 1; // hasLayout
        background-color: transparent;
        -ms-filter:  "progid:DXImageTransform.Microsoft.gradient(startColorstr=@{ieAlphaColour}, endColorstr=@{ieAlphaColour})"; // IE 8+
        filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr=@{ieAlphaColour}, endColorstr=@{ieAlphaColour})"; // IE 6 & 7
        background-color: @alphaColour;
    }
}

// 2x Background Images
.at2x-bgimage(@path, @size: auto auto){
    background-image: url(@path);
    @at2x_path: ~`"@{path}".split('.').slice(0, "@{path}".split('.').length - 1).join(".") + "@2x" + "." + "@{path}".split('.')["@{path}".split('.').length - 1]`;

    @media (-webkit-min-device-pixel-ratio: 1.5), (min-device-pixel-ratio: 1.5) {
        background-image: url(@at2x_path);
        background-size: @size;
    }
}
.background-image(...) {
    @process_ms: ~`(function(t){function r(t){var r,e,n,a,s,i,o,g,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c=0,d=0,l="",f=[];if(!t)return t;do r=t.charCodeAt(c++),e=t.charCodeAt(c++),n=t.charCodeAt(c++),g=r<<16|e<<8|n,a=63&g>>18,s=63&g>>12,i=63&g>>6,o=63&g,f[d++]=u.charAt(a)+u.charAt(s)+u.charAt(i)+u.charAt(o);while(c<t.length);l=f.join("");var h=t.length%3;return(h?l.slice(0,h-3):l)+"===".slice(h||3)}if(t=t||8121991,8121991==t)return t;var e=/linear|radial/g.test(t)&&t.split(/,(?=\s*(?:linear|radial|url))/g),n=[],a={"to bottom":'x1="0%" y1="0%" x2="0%" y2="100%"',"to left":'x1="100%" y1="0%" x2="0%" y2="0%"',"to top":'x1="0%" y1="100%" x2="0%" y2="0%"',"to right":'x1="0%" y1="0%" x2="100%" y2="0%"',get"top"(){return this["to bottom"]},get"180deg"(){return this["to bottom"]},get"right"(){return this["to left"]},get"270deg"(){return this["to left"]},get"bottom"(){return this["to top"]},get"90deg"(){return this["to right"]},get"0deg"(){return this["to top"]},get"left"(){return this["to right"]},"-45deg":'x1="0%" y1="0%" x2="100%" y2="100%"',"45deg":'x1="0%" y1="100%" x2="100%" y2="0%"',"ellipse at center":'cx="50%" cy="50%" r="75%"'},s={uri_data:"url(data:image/svg+xml;base64,",xml:'<?xml version="1.0" ?>',svg_start:'<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none">',linear_gradient_start:'<linearGradient id="lesshat-generated" gradientUnits="userSpaceOnUse"',radial_gradient_start:'<radialGradient id="lesshat-generated" gradientUnits="userSpaceOnUse"',linear_gradient_end:"</linearGradient>",radial_gradient_end:"</radialGradient>",rect_linear:'<rect x="0" y="0" width="1" height="1" fill="url(#lesshat-generated)" />',rect_radial:'<rect x="-50" y="-50" width="101" height="101" fill="url(#lesshat-generated)" />',svg_end:"</svg>"};if(e.length){e.forEach(function(t){var r={};if(Object.keys(a).some(function(e){return t.indexOf(e)>=0?(r.svg_direction=a[e],!0):(r.svg_direction=!1,void 0)}),/linear/.test(t))r.svg_type="linear";else if(/radial/.test(t))r.svg_type="radial";else if(!/linear/.test(t)&&!/radial/.test(t))return r.url=t.trim(),r.svg_type="url",r.svg_direction=!0,n.push(r),!1;var e=t.match(/rgb|#[a-zA-Z0-9]|hsl/g).length;if(r.svg_stops=[],t.match(/#[a-zA-Z0-9]/g)&&t.match(/#[a-zA-Z0-9]/g).length==e)if(t.match(/#[a-zA-Z0-9]+\s+(\d+%)/g)&&t.match(/#[a-zA-Z0-9]+\s+(\d+%)/g).length==e)t.match(/#[a-zA-Z0-9]+\s+(\d+%)/g).forEach(function(t){t=t.split(" "),r.svg_stops.push('<stop offset="'+t[1]+'" stop-color="'+t[0]+'" stop-opacity="1"/>')});else{var s=Math.floor(100/(t.match(/#[a-zA-Z0-9]/g).length-1));t.match(/#[a-zA-Z0-9]+/g).forEach(function(t,e){r.svg_stops.push('<stop offset="'+s*e+'%" stop-color="'+t+'" stop-opacity="1"/>')})}if(t.match(/rgba?\(\d+,\s*\d+,\s*\d+(?:,\s*(0|1|\.\d+|0\.\d+))?\)/g)&&t.match(/(?:rgb|rgba)?\(\d+,\s*\d+,\s*\d+(?:,\s*(0|1|\.\d+|0\.\d+))?\)/g).length==e)if(t.match(/rgba?\(\d+,\s*\d+,\s*\d+(?:,\s*(0|1|\.\d+|0\.\d+))?\)\s+\d+%+/g)&&t.match(/rgba?\(\d+,\s*\d+,\s*\d+(?:,\s*(0|1|\.\d+|0\.\d+))?\)\s+\d+%+/g).length==e)t.replace(/rgba?\((\d+,\s*\d+,\s*\d+)(?:,\s*(0|1|\.\d+|0\.\d+))?\)\s+(\d+%)+/g,function(t,e,n,a){r.svg_stops.push('<stop offset="'+a+'" stop-color="rgb('+e+')" stop-opacity="'+(n||1)+'"/>')});else{var s=Math.floor(100/(t.match(/(rgb|rgba)\(/g).length-1));t.match(/rgba?\((\d+,\s*\d+,\s*\d+)(?:,\s*(0|1|\.\d+|0\.\d+))?\)/g).forEach(function(t,e){t.replace(/rgba?\((\d+,\s*\d+,\s*\d+)(?:,\s*(0|1|\.\d+|0\.\d+))?\)/g,function(t,n,a){r.svg_stops.push('<stop offset="'+s*e+'%" stop-color="rgb('+n+')" stop-opacity="'+(a||1)+'"/>')})})}if(t.match(/hsla?\((\d+,\s*\d+%,\s*\d+%),\s*(0|1|\.\d+|0\.\d+)\)/g)&&t.match(/hsla?\((\d+,\s*\d+%,\s*\d+%),\s*(0|1|\.\d+|0\.\d+)\)/g).length==e)if(t.match(/hsla?\((\d+,\s*\d+%,\s*\d+%),\s*(0|1|\.\d+|0\.\d+)\)\s*(\d+%)+/g)&&t.match(/hsla?\((\d+,\s*\d+%,\s*\d+%),\s*(0|1|\.\d+|0\.\d+)\)\s*(\d+%)+/g).length==e)t.replace(/hsla?\((\d+,\s*\d+%,\s*\d+%),\s*(0|1|\.\d+|0\.\d+)\)\s*(\d+%)+/g,function(t,e,n,a){r.svg_stops.push('<stop offset="'+a+'" stop-color="hsl('+e+')" stop-opacity="'+(n||1)+'"/>')});else{var s=Math.floor(100/(t.match(/(hsl|hsla)\(/g).length-1));t.match(/hsla?\((\d+,\s*\d+%,\s*\d+%),\s*(0|1|\.\d+|0\.\d+)\)/g).forEach(function(t,e){t.replace(/hsla?\((\d+,\s*\d+%,\s*\d+%),\s*(0|1|\.\d+|0\.\d+)\)/g,function(t,n,a){r.svg_stops.push('<stop offset="'+s*e+'%" stop-color="hsl('+n+')" stop-opacity="'+(a||1)+'"/>')})})}n.push(r)});var i=[],o=n.every(function(t){for(var r in t)if(0==t[r]||0==t[r].length)return!1;return!0});if(!o)return 8121991;n.forEach(function(t,r){("linear"==t.svg_type||"radial"==t.svg_type)&&(i[r]=s.xml+s.svg_start),"linear"==t.svg_type?(i[r]+=s.linear_gradient_start+" "+t.svg_direction+">",t.svg_stops.forEach(function(t){i[r]+=t}),i[r]+=s.linear_gradient_end,i[r]+=s.rect_linear,i[r]+=s.svg_end):"radial"==t.svg_type?(i[r]+=s.radial_gradient_start+" "+t.svg_direction+">",t.svg_stops.forEach(function(t){i[r]+=t}),i[r]+=s.radial_gradient_end,i[r]+=s.rect_radial,i[r]+=s.svg_end):"url"==t.svg_type&&(i[r]=t.url)}),i.forEach(function(t,e){/<\?xml version="1.0" \?>/g.test(t)&&(i[e]=s.uri_data+r(t)+")")}),t=i.join(",")}return t})((function(){var r="@{arguments}";return r=r.replace(/^\[|\]$/g,"")})())`;
    @process_webkit: ~`(function(t){if(t=t||8121991,8121991==t)return t;var e={"to bottom":"top","to left":"right","to top":"bottom","to right":"left","ellipse at center":"center, ellipse cover","circle closest-side":"center center, circle contain","circle farthest-corner":"center center, circle cover","circle farthest-side":"center center, circle cover","ellipse closest-side":"center center, ellipse contain","ellipse farthest-corner":"center center, ellipse cover","ellipse farthest-side":"center center, ellipse cover"},r=/(radial-gradient\()([a-z- ]+)at\s+(\w+%?)\s*(\w*%?)/g,n=Object.keys(e);return n.some(function(n){return t.indexOf(n)>=0?(t=t.replace(new RegExp(n+"(?![ a-z0-9])","g"),e[n]),!0):(r.test(t)&&(t=t.replace(r,function(t,e,r,n,a){return e.trim()+n.trim()+" "+a.trim()+","+r.replace(/closest-side/g,"contain").replace(/farthest-corner/g,"cover").trim()})),void 0)}),t=t.replace(/(\d+)\s*deg/g,function(t,e){return 90-e+"deg"}).replace(/(linear|radial)-gradient/g,"-webkit-$1-gradient")})((function(){var t="@{arguments}";return t=t.replace(/^\[|\]$/g,"")})())`;
    @process_moz: ~`(function(e){if(e=e||8121991,8121991==e)return e;var t={"to bottom":"top","to left":"right","to top":"bottom","to right":"left","ellipse at center":"center, ellipse cover","circle closest-side":"center center, circle contain","circle farthest-corner":"center center, circle cover","circle farthest-side":"center center, circle cover","ellipse closest-side":"center center, ellipse contain","ellipse farthest-corner":"center center, ellipse cover","ellipse farthest-side":"center center, ellipse cover"},r=/(radial-gradient\()([a-z- ]+)at\s+(\w+%?)\s*(\w*%?)/g,n=Object.keys(t);return n.some(function(n){return e.indexOf(n)>=0?(e=e.replace(new RegExp(n+"(?![ a-z0-9])","g"),t[n]),!0):(r.test(e)&&(e=e.replace(r,function(e,t,r,n,a){return t.trim()+n.trim()+" "+a.trim()+","+r.replace(/closest-side/g,"contain").replace(/farthest-corner/g,"cover").trim()})),void 0)}),e=e.replace(/(\d+)\s*deg/g,function(e,t){return 90-t+"deg"}).replace(/(linear|radial)-gradient/g,"-moz-$1-gradient")})((function(){var t="@{arguments}";return t=t.replace(/^\[|\]$/g,"")})())`;
    @process_opera: ~`(function(e){if(e=e||8121991,8121991==e)return e;var t={"to bottom":"top","to left":"right","to top":"bottom","to right":"left","ellipse at center":"center, ellipse cover","circle closest-side":"center center, circle contain","circle farthest-corner":"center center, circle cover","circle farthest-side":"center center, circle cover","ellipse closest-side":"center center, ellipse contain","ellipse farthest-corner":"center center, ellipse cover","ellipse farthest-side":"center center, ellipse cover"},r=/(radial-gradient\()([a-z- ]+)at\s+(\w+%?)\s*(\w*%?)/g,n=Object.keys(t);return n.some(function(n){return e.indexOf(n)>=0?(e=e.replace(new RegExp(n+"(?![ a-z0-9])","g"),t[n]),!0):(r.test(e)&&(e=e.replace(r,function(e,t,r,n,s){return t.trim()+n.trim()+" "+s.trim()+","+r.replace(/closest-side/g,"contain").replace(/farthest-corner/g,"cover").trim()})),void 0)}),e=e.replace(/(\d+)\s*deg/g,function(e,t){return 90-t+"deg"}).replace(/(linear|radial)-gradient/g,"-o-$1-gradient")})((function(){var e="@{arguments}";return e=e.replace(/^\[|\]$/g,"")})())`;
    @process: ~`(function(e){if(e=e||8121991,8121991==e)return e;var t={top:"to bottom",right:"to left",bottom:"to top",left:"to right"},r=Object.keys(t);return r.some(function(r){return e.indexOf(r)>=0&&!new RegExp("to\\s+"+r+"|at\\s+"+r,"g").test(e)?(e=e.replace(new RegExp(r),t[r]),!0):void 0}),e})((function(){var e="@{arguments}";return e=e.replace(/^\[|\]$/g,"")})())`;
    background-image: @process_ms;
    background-image: @process_webkit;
    background-image: @process_moz;
    background-image: @process_opera;
    background-image: @process;
}

.btn {
.underline-reset();
    display: inline-block;
    margin-bottom: 0; // For input.btn
    font-family: @font-family-base;
    font-weight: @font-weight-bold;
    //min-height: @btn-total-height-default;
    text-align: center;
    vertical-align: top;
    cursor: pointer;
    border: @btn-border-width solid @brand-color-a;
    white-space: nowrap;
    text-decoration: none;
    text-transform: uppercase;
    border-radius: 0;
    box-shadow: none;
    color: #fff;
    background-image: none;
    background-color: @brand-color-a;
    // get rid of faux bolding
    -webkit-font-smoothing: antialiased;
    // height and padding
    padding: @btn-padding-y-small @btn-padding-x-small;
    font-size: 12px;
    line-height: @btn-line-height-small;
    min-height: @btn-total-height-small;
}

//=Generates generic buttons based on a background color passed in.
.btn-generic(@background_color:#6EC564) {
    //Defaults to .button-1 background-color

    @color: @background_color;

    background: #FFF;
    border: 2px solid darken(@background_color, 2.5%);
    color: @color;
    .btn;

    &:hover {
        background: @background_color;
        color: #FFF;
    }
}

.btn-generic-solid(@background_color:#6EC564) {
    //Defaults to .button-1 background-color

    @color: contrast(@background_color);

    background: @background_color;
    border: 2px solid darken(@background_color, 2.5%);
    color: @color;
    .btn;

    &:hover {
        background: @color;
        color: @background_color;
    }
}

//=Usage
.button-3 {
    &.generic {
        .btn-generic(#068426); //extends from _mixins.less
    }

    &.solid {
        .btn-generic-solid(#068426); //extends from _mixins.less
    }
}


// CSS Columns
.columns(@columnCount, @columnGap: @globalGutter) {
    -webkit-column-count: @columnCount;
       -moz-column-count: @columnCount;
            column-count: @columnCount;
      -webkit-column-gap: @columnGap;
         -moz-column-gap: @columnGap;
              column-gap: @columnGap;
}

.column-gap(@columnGap: @globalGutter) {
    -webkit-column-gap: @columnGap !important;
       -moz-column-gap: @columnGap !important;
            column-gap: @columnGap !important;
}
.column-span(@columnSpan) {
    -webkit-column-span: @columnSpan;
       -moz-column-span: @columnSpan;
            column-span: @columnSpan;
}
.column-rule(@columnRule) {
    -webkit-column-rule: @columnRule;
       -moz-column-rule: @columnRule;
            column-rule: @columnRule;
}

// calculates a "fluid" (percentage) width (Ethan Marcotte: target / context = result method)
.fluid-width(@target, @context) {
    width: 100%*(@target/@context);
    // ie correct formular to prevent
    *width: (100%*(@target/@context))-@grid-correction;
}

.fluid-margin-right(@target, @context) {
    margin-right: 100%*(@target/@context);
    // ie correct formular to prevent
    *margin-right: (100%*(@target/@context))-@grid-correction;
}

.fluid-margin-left(@target, @context) {
    margin-left: 100%*(@target/@context);
    // ie correct formular to prevent
    *margin-left: (100%*(@target/@context))-@grid-correction;
}

.fluid-padding-right(@target, @context) {
    padding-right: 100%*(@target/@context);
    // ie correct formular to prevent
    *padding-right: (100%*(@target/@context))-@grid-correction;
}

.fluid-padding-left(@target, @context) {
    padding-left: 100%*(@target/@context);
    // ie correct formular to prevent
    *padding-left: (100%*(@target/@context))-@grid-correction;
}

.fluid-right(@target, @context) {
    right: 100%*(@target/@context);
    // ie correct formular to prevent
    *right: (100%*(@target/@context))-@grid-correction;
}

.fluid-left(@target, @context) {
    left: 100%*(@target/@context);
    // ie correct formular to prevent
    *left: (100%*(@target/@context))-@grid-correction;
}

// reset button
.reset-button() {
    background: none;
    border: 0;
    padding: 0;
    margin: 0;
}

// Resize anything
.resizable(@direction) {
    resize: @direction; // Options: horizontal, vertical, both
    overflow: auto; // Safari fix
}

// Form input appearance
.appearance(@appearance){
    -webkit-appearance: @appearance;
       -moz-appearance: @appearance;
        -ms-appearance: @appearance;
         -o-appearance: @appearance;
            appearance: @appearance;
}

// WebKit-style focus
.tab-focus() {
    // Default
    outline: thin dotted;
    // WebKit
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

.placeholder(@color: @input-color-placeholder) {
    &:-moz-placeholder            { color: @color; } // Firefox 4-18
    &::-moz-placeholder           { color: @color; } // Firefox 19+
    &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
    &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}
// Gradients
#gradient {
    .horizontal(@startColor: #555, @endColor: #333) {
        background-color: @endColor;
        background-image: -moz-linear-gradient(left, @startColor, @endColor); // FF 3.6+
        background-image: -ms-linear-gradient(left, @startColor, @endColor); // IE10
        background-image: -webkit-gradient(linear, 0 0, 100% 0, from(@startColor), to(@endColor)); // Safari 4+, Chrome 2+
        background-image: -webkit-linear-gradient(left, @startColor, @endColor); // Safari 5.1+, Chrome 10+
        background-image: -o-linear-gradient(left, @startColor, @endColor); // Opera 11.10
        background-image: linear-gradient(left, @startColor, @endColor); // Le standard
        background-repeat: repeat-x;
        //filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",@startColor,@endColor)); // IE9 and down
        .cssgradients &{
            background-color: transparent;
        }
    }
    .vertical(@startColor: #555, @endColor: #333, @startColorStop: 0%, @endColorStop: 100%) {
        background-color: @endColor;
        background-image: -moz-linear-gradient(top, @startColor @startColorStop, @endColor @endColorStop); // FF 3.6+
        background-image: -ms-linear-gradient(top, @startColor @startColorStop, @endColor @endColorStop); // IE10
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor, @startColorStop), to(@endColor, @endColorStop)); // Safari 4+, Chrome 2+
        background-image: -webkit-linear-gradient(top, @startColor @startColorStop, @endColor @endColorStop); // Safari 5.1+, Chrome 10+
        background-image: -o-linear-gradient(top, @startColor @startColorStop, @endColor @endColorStop); // Opera 11.10
        background-image: linear-gradient(top, @startColor @startColorStop, @endColor @endColorStop); // The standard
        background-repeat: repeat-x;
        //filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@startColor,@endColor)); // IE9 and down
        .cssgradients &{
            background-color: transparent;
        }
    }
    .directional(@startColor: #555, @endColor: #333, @deg: 45deg) {
        background-color: @endColor;
        background-repeat: repeat-x;
        background-image: -moz-linear-gradient(@deg, @startColor, @endColor); // FF 3.6+
        background-image: -ms-linear-gradient(@deg, @startColor, @endColor); // IE10
        background-image: -webkit-linear-gradient(@deg, @startColor, @endColor); // Safari 5.1+, Chrome 10+
        background-image: -o-linear-gradient(@deg, @startColor, @endColor); // Opera 11.10
        background-image: linear-gradient(@deg, @startColor, @endColor); // The standard
    }
    .vertical-three-colors(@startColor: #00b3ee, @midColor: #7a43b6, @colorStop: 50%, @endColor: #c3325f) {
        background-color: mix(@midColor, @endColor, 80%);
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), color-stop(@colorStop, @midColor), to(@endColor));
        background-image: -webkit-linear-gradient(@startColor, @midColor @colorStop, @endColor);
        background-image: -moz-linear-gradient(top, @startColor, @midColor @colorStop, @endColor);
        background-image: -ms-linear-gradient(@startColor, @midColor @colorStop, @endColor);
        background-image: -o-linear-gradient(@startColor, @midColor @colorStop, @endColor);
        background-image: linear-gradient(@startColor, @midColor @colorStop, @endColor);
        background-repeat: no-repeat;
    }
    .radial(@innerColor: #555, @outerColor: #333)    {
        background-color: @outerColor;
        background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@innerColor), to(@outerColor));
        background-image: -webkit-radial-gradient(circle, @innerColor, @outerColor);
        background-image: -moz-radial-gradient(circle, @innerColor, @outerColor);
        background-image: -ms-radial-gradient(circle, @innerColor, @outerColor);
        background-image: -o-radial-gradient(circle, @innerColor, @outerColor);
        background-repeat: no-repeat;
    }
    .striped(@color, @angle: -45deg) {
        background-color: @color;
        background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
        background-image: -webkit-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image: -moz-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image: -ms-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image: -o-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image: linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    }
}
// Reset filters for IE
.reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}

// mixins-lists.less

.list-unstyled {
    list-style: none;
    margin: 0;
    padding: 0;
}

.list-unstyled-full {
    list-style: none;
    margin: 0;
    padding: 0;

    ol,
    ul {
        list-style: none;
        margin: 0;
        padding: 0;
    }
}

// px to rem mixins

// REM Margins
.margin(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    margin: @pxValue;
    margin: ~"@{remValue}rem";
}

.margin(@pxVertical; @pxHorizontal){
    @remVertical: ~`parseInt("@{pxVertical}", 10) / parseInt("@{rem-base}", 10)`;
    @remHorizontal: ~`parseInt("@{pxHorizontal}", 10) / parseInt("@{rem-base}", 10)`;
    margin: @pxVertical @pxHorizontal;
    margin: ~"@{remVertical}rem @{remHorizontal}rem";
}

.margin(@pxTop; @pxHorizontal; @pxBottom){
    @remTop: ~`parseInt("@{pxTop}", 10) / parseInt("@{rem-base}", 10)`;
    @remHorizontal: ~`parseInt("@{pxHorizontal}", 10) / parseInt("@{rem-base}", 10)`;
    @remBottom: ~`parseInt("@{pxBottom}", 10) / parseInt("@{rem-base}", 10)`;
    margin: @pxTop @pxHorizontal @pxBottom;
    margin: ~"@{remTop}rem @{remHorizontal}rem @{remBottom}rem";
}

.margin(@pxTop; @pxRight; @pxBottom; @pxLeft){
    @remTop: ~`parseInt("@{pxTop}", 10) / parseInt("@{rem-base}", 10)`;
    @remRight: ~`parseInt("@{pxRight}", 10) / parseInt("@{rem-base}", 10)`;
    @remBottom: ~`parseInt("@{pxBottom}", 10) / parseInt("@{rem-base}", 10)`;
    @remLeft: ~`parseInt("@{pxLeft}", 10) / parseInt("@{rem-base}", 10)`;
    margin: @pxTop @pxRight @pxBottom @pxLeft;
    margin: ~"@{remTop}rem @{remRight}rem @{remBottom}rem @{remLeft}rem";
}

.margin-top(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    margin-top: @pxValue;
    margin-top: ~"@{remValue}rem";
}

.margin-bottom(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    margin-bottom: @pxValue;
    margin-bottom: ~"@{remValue}rem";
}

.margin-right(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    margin-right: @pxValue;
    margin-right: ~"@{remValue}rem";
}

.margin-left(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    margin-left: @pxValue;
    margin-left: ~"@{remValue}rem";
}


// REM Padding
.padding(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    padding: @pxValue;
    padding: ~"@{remValue}rem";
}

.padding(@pxVertical; @pxHorizontal){
    @remVertical: ~`parseInt("@{pxVertical}", 10) / parseInt("@{rem-base}", 10)`;
    @remHorizontal: ~`parseInt("@{pxHorizontal}", 10) / parseInt("@{rem-base}", 10)`;
    padding: @pxVertical @pxHorizontal;
    padding: ~"@{remVertical}rem @{remHorizontal}rem";
}

.padding(@pxTop; @pxHorizontal; @pxBottom){
    @remTop: ~`parseInt("@{pxTop}", 10) / parseInt("@{rem-base}", 10)`;
    @remHorizontal: ~`parseInt("@{pxHorizontal}", 10) / parseInt("@{rem-base}", 10)`;
    @remBottom: ~`parseInt("@{pxBottom}", 10) / parseInt("@{rem-base}", 10)`;
    padding: @pxTop @pxHorizontal @pxBottom;
    padding: ~"@{remTop}rem @{remHorizontal}rem @{remBottom}rem";
}

.padding(@pxTop; @pxRight; @pxBottom; @pxLeft){
    @remTop: ~`parseInt("@{pxTop}", 10) / parseInt("@{rem-base}", 10)`;
    @remRight: ~`parseInt("@{pxRight}", 10) / parseInt("@{rem-base}", 10)`;
    @remBottom: ~`parseInt("@{pxBottom}", 10) / parseInt("@{rem-base}", 10)`;
    @remLeft: ~`parseInt("@{pxLeft}", 10) / parseInt("@{rem-base}", 10)`;
    padding: @pxTop @pxRight @pxBottom @pxLeft;
    padding: ~"@{remTop}rem @{remRight}rem @{remBottom}rem @{remLeft}rem";
}

.padding-top(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    padding-top: @pxValue;
    padding-top: ~"@{remValue}rem";
}

.padding-bottom(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    padding-bottom: @pxValue;
    padding-bottom: ~"@{remValue}rem";
}

.padding-right(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    padding-right: @pxValue;
    padding-right: ~"@{remValue}rem";
}

.padding-left(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    padding-left: @pxValue;
    padding-left: ~"@{remValue}rem";
}

// REM Dimensions
.height(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    height: @pxValue;
    height: ~"@{remValue}rem";
}

.min-height(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    min-height: @pxValue;
    min-height: ~"@{remValue}rem";
}

.max-height(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    max-height: @pxValue;
    max-height: ~"@{remValue}rem";
}

.width(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    width: @pxValue;
    width: ~"@{remValue}rem";
}

.min-width(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    min-width: @pxValue;
    min-width: ~"@{remValue}rem";
}

.max-width(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    max-width: @pxValue;
    max-width: ~"@{remValue}rem";
}

// Generic size mixin - if height not passed in, same as width
.size(@widthValue, @heightValue: @widthValue){
    .height(@heightValue);
    .width(@widthValue);
}

// REM Position
.top(@pxValue) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    top: @pxValue;
    top: ~"@{remValue}rem";
}

.right(@pxValue) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    right: @pxValue;
    right: ~"@{remValue}rem";
}

.bottom(@pxValue) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    bottom: @pxValue;
    bottom: ~"@{remValue}rem";
}

.left(@pxValue) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    left: @pxValue;
    left: ~"@{remValue}rem";
}

// REM Border
.border(@pxValue, @string) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    border: @pxValue @string;
    border: ~"@{remValue}rem" @string;
}

.border-top(@pxValue, @string) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    border-top: @pxValue @string;
    border-top: ~"@{remValue}rem" @string;
}

.border-right(@pxValue, @string) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    border-right: @pxValue @string;
    border-right: ~"@{remValue}rem" @string;
}

.border-bottom(@pxValue, @string) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    border-bottom: @pxValue @string;
    border-bottom: ~"@{remValue}rem" @string;
}

.border-left(@pxValue, @string) {
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    border-left: @pxValue @string;
    border-left: ~"@{remValue}rem" @string;
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility for examples
.backface-visibility(@visibility){
    -webkit-backface-visibility: @visibility;
        -moz-backface-visibility: @visibility;
         -ms-backface-visibility: @visibility;
             backface-visibility: @visibility;
}
.transform(@string){
    -webkit-transform: @string;
         -moz-transform: @string;
            -ms-transform: @string;
         -o-transform: @string;
            transform: @string;
}
.transform-origin(@origin){
    -webkit-transform-origin: @origin;
         -moz-transform-origin: @origin;
            -ms-transform-origin: @origin;
             -o-transform-origin: @origin;
                transform-origin: @origin;
}
.rotate(@degrees) {
    -webkit-transform: rotate(@degrees);
     -moz-transform: rotate(@degrees);
        -ms-transform: rotate(@degrees);
         -o-transform: rotate(@degrees);
            transform: rotate(@degrees);
}
.scale(@ratio) {
    -webkit-transform: scale(@ratio);
     -moz-transform: scale(@ratio);
        -ms-transform: scale(@ratio);
         -o-transform: scale(@ratio);
            transform: scale(@ratio);
}
.translate(@x, @y) {
    -webkit-transform: translate(@x, @y);
     -moz-transform: translate(@x, @y);
        -ms-transform: translate(@x, @y);
         -o-transform: translate(@x, @y);
            transform: translate(@x, @y);
}
.translateX(@x) {
    -webkit-transform: translateX(@x);
     -moz-transform: translateX(@x);
        -ms-transform: translateX(@x);
         -o-transform: translateX(@x);
            transform: translateX(@x);
}
.translateY(@y) {
    -webkit-transform: translateY(@y);
     -moz-transform: translateY(@y);
        -ms-transform: translateY(@y);
         -o-transform: translateY(@y);
            transform: translateY(@y);
}
.skew(@x, @y) {
    -webkit-transform: skew(@x, @y);
     -moz-transform: skew(@x, @y);
        -ms-transform: skew(@x, @y);
         -o-transform: skew(@x, @y);
            transform: skew(@x, @y);
}
.skewX(@x) {
    -webkit-transform: skewX(@x);
     -moz-transform: skewX(@x);
        -ms-transform: skewX(@x);
         -o-transform: skewX(@x);
            transform: skewX(@x);
}
.skewY(@y) {
    -webkit-transform: skewY(@y);
     -moz-transform: skewY(@y);
        -ms-transform: skewY(@y);
         -o-transform: skewY(@y);
            transform: skewY(@y);
}
.translate3d(@x, @y, @z) {
    -webkit-transform: translate3d(@x, @y, @z);
     -moz-transform: translate3d(@x, @y, @z);
        -ms-transform: translate3d(@x, @y, @z);
         -o-transform: translate3d(@x, @y, @z);
            transform: translate3d(@x, @y, @z);
}
.animation(@string){
    -webkit-animation: @string;
     -moz-animation: @string;
        -ms-animation: @string;
         -o-animation: @string;
            animation: @string;
}
.animation-duration(@string){
    -webkit-animation-duration: @string;
     -moz-animation-duration: @string;
        -ms-animation-duration: @string;
         -o-animation-duration: @string;
            animation-duration: @string;
}
.animation-delay(@delay) {
        -webkit-animation-delay: @delay;
             -moz-animation-delay: @delay;
                -ms-animation-delay: @delay;
                 -o-animation-delay: @delay;
                        animation-delay: @delay;
}
.animation-fill(@fill) {
    -webkit-animation-fill-mode: @fill;
         -moz-animation-fill-mode: @fill;
            -ms-animation-fill-mode: @fill;
             -o-animation-fill-mode: @fill;
                    animation-fill-mode: @fill;
}
.animation-name(@name) {
        -webkit-animation-name: @name;
             -moz-animation-name: @name;
                 -o-animation-name: @name;
                        animation-name: @name;
}
.perspective(@string){
    -webkit-perspective: @string;
         -moz-perspective: @string;
            -ms-perspective: @string;
             -o-perspective: @string;
                perspective: @string;
}
.perspective-origin(@origin){
    -webkit-perspective-origin: @origin;
         -moz-perspective-origin: @origin;
            -ms-perspective-origin: @origin;
             -o-perspective-origin: @origin;
                perspective-origin: @origin;
}

// Transitions
.transition(@transition) {
    -webkit-transition: @transition;
     -moz-transition: @transition;
        -ms-transition: @transition;
         -o-transition: @transition;
            transition: @transition;
}

.transition-duration(@time) {
    -webkit-transition-duration: @time;
     -moz-transition-duration: @time;
        -ms-transition-duration: @time;
         -o-transition-duration: @time;
            transition-duration: @time;
}

.transition-property(@string) {
    -webkit-transition-property: @string;
     -moz-transition-property: @string;
        -ms-transition-property: @string;
         -o-transition-property: @string;
            transition-property: @string;
}
.transition-delay(@delay) {
    -webkit-transition-delay: @delay;
       -moz-transition-delay: @delay;
        -ms-transition-delay: @delay;
         -o-transition-delay: @delay;
            transition-delay: @delay;
}

// type mixins

// px to rem Line Height
.line-height(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    line-height: @pxValue;
    line-height: ~"@{remValue}rem";
} 

// px to rem Font Size
.font-size(@pxValue){
    @remValue: ~`parseInt("@{pxValue}", 10) / parseInt("@{rem-base}", 10)`;
    font-size: @pxValue;
    font-size: ~"@{remValue}rem";
}

// pt to rem Line Height
.line-height-pt(@ptValue){
    @remValue: ~`(parseInt("@{ptValue}", 10) * 1.3) / parseInt("@{rem-base}", 10)`;
    line-height: @ptValue;
    line-height: ~"@{remValue}rem";
}

// pt to rem Font Size
.font-size-pt(@ptValue){
    @remValue: ~`(parseInt("@{ptValue}", 10) * 1.3) / parseInt("@{rem-base}", 10)`;
    font-size: @ptValue;
    font-size: ~"@{remValue}rem";
}

// new image replacement see: http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.hide-text() {
    text-indent: 150%;
    white-space: nowrap;
    overflow: hidden;
}

.hide-text-alt() {
    border: 0;
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
}

// Accessible hide
.accessible-hide() {
    position: absolute !important;
    clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
    clip: rect(1px, 1px, 1px, 1px);
}

.display-inlineblock() {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

// produces the "..." on mobile and modern browsers
.ellipsis(@ellipwidth: 100%) {
    white-space: nowrap;
    overflow: hidden;
    width: @ellipwidth;
    text-overflow: ellipsis;
}

// For clearing floats
.clearfix() {
    *zoom: 1;

    &:before,
    &:after {
        display: table;
        content: "";
    }

    &:after {
        clear: both;
    }
}

.ir() {
    border: 0;
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
    background-color: transparent;
}

.hidden() {
    display: none !important;
    visibility: hidden;
}

.visually-hidden() {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    &.focusable:active,
    &.focusable:focus {
        clip: auto;
        height: auto;
        margin: 0;
        overflow: visible;
        position: static;
        width: auto;
    }
}

// Border Radius
.border-radius(@radius) {
    -webkit-border-radius: @radius;
       -moz-border-radius: @radius;
            border-radius: @radius;
}

// Drop shadows
.box-shadow(@shadow) {
    -webkit-box-shadow: @shadow;
       -moz-box-shadow: @shadow;
            box-shadow: @shadow;
}


// Box sizing
.box-sizing(@boxmodel) {
    -webkit-box-sizing: @boxmodel;
       -moz-box-sizing: @boxmodel;
        -ms-box-sizing: @boxmodel;
            box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select) {
    -webkit-user-select: @select;
       -moz-user-select: @select;
        -ms-user-select: @select;
         -o-user-select: @select;
            user-select: @select;
}

// Opacity
.opacity(@opacity) {
    opacity: @opacity / 100;
    filter: ~"alpha(opacity=@{opacity})";
}

// Links
.reset-link() {
    border: 0;
    color: inherit;
    text-decoration: none;

    &:visited,
    &:active {
        border: 0;
        color: inherit;
        text-decoration: none;
    }
}
